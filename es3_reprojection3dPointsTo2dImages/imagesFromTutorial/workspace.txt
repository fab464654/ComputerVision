
fig1 = 

  Figure (1) with properties:

      Number: 1
        Name: ''
       Color: [0.9400 0.9400 0.9400]
    Position: [681 559 560 420]
       Units: 'pixels'

  Show all properties


P =

    0.0087    0.0568   -0.0206    0.7608
    0.0077   -0.0048   -0.0516    0.6439
   -0.0000    0.0000   -0.0000    0.0004

>> calibrationToolbox
Unrecognized function or variable 'calibrationToolbox'.
 
>> TOOLBOX_calib
Unrecognized function or variable 'TOOLBOX_calib'.
 
>> TOOLBOX_calib
Unrecognized function or variable 'TOOLBOX_calib'.
 
>> TOOLBOX_calib
Unrecognized function or variable 'TOOLBOX_calib'.
 
>> TOOLBOX_calib
Unrecognized function or variable 'TOOLBOX_calib'.
 
>> calib_gui 
'calib_gui' is not found in the current folder or on the MATLAB path, but exists in:
    D:\Documents\MATLAB\Computer Vision\TOOLBOX_calib

Change the MATLAB current folder or add its folder to the MATLAB path.
 
>> addpath 'D:\Documents\MATLAB\Computer Vision\TOOLBOX_calib'
>> calib_gui

.            Image10.tif  Image13.tif  Image16.tif  Image19.tif  Image3.tif   Image6.tif   Image9.tif   
..           Image11.tif  Image14.tif  Image17.tif  Image2.tif   Image4.tif   Image7.tif   
Image1.tif   Image12.tif  Image15.tif  Image18.tif  Image20.tif  Image5.tif   Image8.tif   


Basename camera calibration images (without number nor suffix): Image
Image format: ([]='r'='ras', 'b'='bmp', 't'='tif', 'p'='pgm', 'j'='jpg', 'm'='ppm') tif
Loading image 1...2...3...4...5...6...7...8...9...10...11...12...13...14...15...16...17...18...19...20...
done

Extraction of the grid corners on the images
Number(s) of image(s) to process ([] = all images) = 
Window size for corner finder (wintx and winty):
wintx ([] = 5) = 
winty ([] = 5) = 
Window size = 11x11
Do you want to use the automatic square counting mechanism (0=[]=default)
  or do you always want to enter the number of squares manually (1,other)? 

Processing image 1...
Using (wintx,winty)=(5,5) - Window size = 11x11      (Note: To reset the window size, run script clearwin)
Click on the four extreme corners of the rectangular complete pattern (the first clicked corner is the origin)...
Size dX of each square along the X direction ([]=100mm) = 
Size dY of each square along the Y direction ([]=100mm) = 
If the guessed grid corners (red crosses on the image) are not close to the actual corners,
it is necessary to enter an initial guess for the radial distortion factor kc (useful for subpixel detection)
Need of an initial guess for distortion? ([]=no, other=yes) 
Corner extraction...

Processing image 2...
Using (wintx,winty)=(5,5) - Window size = 11x11      (Note: To reset the window size, run script clearwin)
Click on the four extreme corners of the rectangular complete pattern (the first clicked corner is the origin)...
Size of each square along the X direction: dX=100mm
Size of each square along the Y direction: dY=100mm   (Note: To reset the size of the squares, clear the variables dX and dY)
If the guessed grid corners (red crosses on the image) are not close to the actual corners,
it is necessary to enter an initial guess for the radial distortion factor kc (useful for subpixel detection)
Need of an initial guess for distortion? ([]=no, other=yes) 
Corner extraction...

Processing image 3...
Using (wintx,winty)=(5,5) - Window size = 11x11      (Note: To reset the window size, run script clearwin)
Click on the four extreme corners of the rectangular complete pattern (the first clicked corner is the origin)...
Size of each square along the X direction: dX=100mm
Size of each square along the Y direction: dY=100mm   (Note: To reset the size of the squares, clear the variables dX and dY)
If the guessed grid corners (red crosses on the image) are not close to the actual corners,
it is necessary to enter an initial guess for the radial distortion factor kc (useful for subpixel detection)
Need of an initial guess for distortion? ([]=no, other=yes) 
Corner extraction...

Processing image 4...
Using (wintx,winty)=(5,5) - Window size = 11x11      (Note: To reset the window size, run script clearwin)
Click on the four extreme corners of the rectangular complete pattern (the first clicked corner is the origin)...
Size of each square along the X direction: dX=100mm
Size of each square along the Y direction: dY=100mm   (Note: To reset the size of the squares, clear the variables dX and dY)
If the guessed grid corners (red crosses on the image) are not close to the actual corners,
it is necessary to enter an initial guess for the radial distortion factor kc (useful for subpixel detection)
Need of an initial guess for distortion? ([]=no, other=yes) 
Corner extraction...

Processing image 5...
Using (wintx,winty)=(5,5) - Window size = 11x11      (Note: To reset the window size, run script clearwin)
Click on the four extreme corners of the rectangular complete pattern (the first clicked corner is the origin)...
Size of each square along the X direction: dX=100mm
Size of each square along the Y direction: dY=100mm   (Note: To reset the size of the squares, clear the variables dX and dY)
If the guessed grid corners (red crosses on the image) are not close to the actual corners,
it is necessary to enter an initial guess for the radial distortion factor kc (useful for subpixel detection)
Need of an initial guess for distortion? ([]=no, other=yes) 
Corner extraction...

Processing image 6...
Using (wintx,winty)=(5,5) - Window size = 11x11      (Note: To reset the window size, run script clearwin)
Click on the four extreme corners of the rectangular complete pattern (the first clicked corner is the origin)...
Size of each square along the X direction: dX=100mm
Size of each square along the Y direction: dY=100mm   (Note: To reset the size of the squares, clear the variables dX and dY)
If the guessed grid corners (red crosses on the image) are not close to the actual corners,
it is necessary to enter an initial guess for the radial distortion factor kc (useful for subpixel detection)
Need of an initial guess for distortion? ([]=no, other=yes) 
Corner extraction...

Processing image 7...
Using (wintx,winty)=(5,5) - Window size = 11x11      (Note: To reset the window size, run script clearwin)
Click on the four extreme corners of the rectangular complete pattern (the first clicked corner is the origin)...
Size of each square along the X direction: dX=100mm
Size of each square along the Y direction: dY=100mm   (Note: To reset the size of the squares, clear the variables dX and dY)
If the guessed grid corners (red crosses on the image) are not close to the actual corners,
it is necessary to enter an initial guess for the radial distortion factor kc (useful for subpixel detection)
Need of an initial guess for distortion? ([]=no, other=yes) 
Corner extraction...

Processing image 8...
Using (wintx,winty)=(5,5) - Window size = 11x11      (Note: To reset the window size, run script clearwin)
Click on the four extreme corners of the rectangular complete pattern (the first clicked corner is the origin)...
Size of each square along the X direction: dX=100mm
Size of each square along the Y direction: dY=100mm   (Note: To reset the size of the squares, clear the variables dX and dY)
If the guessed grid corners (red crosses on the image) are not close to the actual corners,
it is necessary to enter an initial guess for the radial distortion factor kc (useful for subpixel detection)
Need of an initial guess for distortion? ([]=no, other=yes) 
Corner extraction...

Processing image 9...
Using (wintx,winty)=(5,5) - Window size = 11x11      (Note: To reset the window size, run script clearwin)
Click on the four extreme corners of the rectangular complete pattern (the first clicked corner is the origin)...
Size of each square along the X direction: dX=100mm
Size of each square along the Y direction: dY=100mm   (Note: To reset the size of the squares, clear the variables dX and dY)
If the guessed grid corners (red crosses on the image) are not close to the actual corners,
it is necessary to enter an initial guess for the radial distortion factor kc (useful for subpixel detection)
Need of an initial guess for distortion? ([]=no, other=yes) 
Corner extraction...

Processing image 10...
Using (wintx,winty)=(5,5) - Window size = 11x11      (Note: To reset the window size, run script clearwin)
Click on the four extreme corners of the rectangular complete pattern (the first clicked corner is the origin)...
Size of each square along the X direction: dX=100mm
Size of each square along the Y direction: dY=100mm   (Note: To reset the size of the squares, clear the variables dX and dY)
If the guessed grid corners (red crosses on the image) are not close to the actual corners,
it is necessary to enter an initial guess for the radial distortion factor kc (useful for subpixel detection)
Need of an initial guess for distortion? ([]=no, other=yes) 
Corner extraction...

Processing image 11...
Using (wintx,winty)=(5,5) - Window size = 11x11      (Note: To reset the window size, run script clearwin)
Click on the four extreme corners of the rectangular complete pattern (the first clicked corner is the origin)...
Size of each square along the X direction: dX=100mm
Size of each square along the Y direction: dY=100mm   (Note: To reset the size of the squares, clear the variables dX and dY)
If the guessed grid corners (red crosses on the image) are not close to the actual corners,
it is necessary to enter an initial guess for the radial distortion factor kc (useful for subpixel detection)
Need of an initial guess for distortion? ([]=no, other=yes) 
Corner extraction...

Processing image 12...
Using (wintx,winty)=(5,5) - Window size = 11x11      (Note: To reset the window size, run script clearwin)
Click on the four extreme corners of the rectangular complete pattern (the first clicked corner is the origin)...
Size of each square along the X direction: dX=100mm
Size of each square along the Y direction: dY=100mm   (Note: To reset the size of the squares, clear the variables dX and dY)
If the guessed grid corners (red crosses on the image) are not close to the actual corners,
it is necessary to enter an initial guess for the radial distortion factor kc (useful for subpixel detection)
Need of an initial guess for distortion? ([]=no, other=yes) 
Corner extraction...

Processing image 13...
Using (wintx,winty)=(5,5) - Window size = 11x11      (Note: To reset the window size, run script clearwin)
Click on the four extreme corners of the rectangular complete pattern (the first clicked corner is the origin)...
Size of each square along the X direction: dX=100mm
Size of each square along the Y direction: dY=100mm   (Note: To reset the size of the squares, clear the variables dX and dY)
If the guessed grid corners (red crosses on the image) are not close to the actual corners,
it is necessary to enter an initial guess for the radial distortion factor kc (useful for subpixel detection)
Need of an initial guess for distortion? ([]=no, other=yes) 
Corner extraction...

Processing image 14...
Using (wintx,winty)=(5,5) - Window size = 11x11      (Note: To reset the window size, run script clearwin)
Click on the four extreme corners of the rectangular complete pattern (the first clicked corner is the origin)...
Size of each square along the X direction: dX=100mm
Size of each square along the Y direction: dY=100mm   (Note: To reset the size of the squares, clear the variables dX and dY)
If the guessed grid corners (red crosses on the image) are not close to the actual corners,
it is necessary to enter an initial guess for the radial distortion factor kc (useful for subpixel detection)
Need of an initial guess for distortion? ([]=no, other=yes) 
Corner extraction...

Processing image 15...
Using (wintx,winty)=(5,5) - Window size = 11x11      (Note: To reset the window size, run script clearwin)
Click on the four extreme corners of the rectangular complete pattern (the first clicked corner is the origin)...
Size of each square along the X direction: dX=100mm
Size of each square along the Y direction: dY=100mm   (Note: To reset the size of the squares, clear the variables dX and dY)
If the guessed grid corners (red crosses on the image) are not close to the actual corners,
it is necessary to enter an initial guess for the radial distortion factor kc (useful for subpixel detection)
Need of an initial guess for distortion? ([]=no, other=yes) 
Corner extraction...

Processing image 16...
Using (wintx,winty)=(5,5) - Window size = 11x11      (Note: To reset the window size, run script clearwin)
Click on the four extreme corners of the rectangular complete pattern (the first clicked corner is the origin)...
Size of each square along the X direction: dX=100mm
Size of each square along the Y direction: dY=100mm   (Note: To reset the size of the squares, clear the variables dX and dY)
If the guessed grid corners (red crosses on the image) are not close to the actual corners,
it is necessary to enter an initial guess for the radial distortion factor kc (useful for subpixel detection)
Need of an initial guess for distortion? ([]=no, other=yes) 
Corner extraction...

Processing image 17...
Using (wintx,winty)=(5,5) - Window size = 11x11      (Note: To reset the window size, run script clearwin)
Click on the four extreme corners of the rectangular complete pattern (the first clicked corner is the origin)...
Size of each square along the X direction: dX=100mm
Size of each square along the Y direction: dY=100mm   (Note: To reset the size of the squares, clear the variables dX and dY)
If the guessed grid corners (red crosses on the image) are not close to the actual corners,
it is necessary to enter an initial guess for the radial distortion factor kc (useful for subpixel detection)
Need of an initial guess for distortion? ([]=no, other=yes) 
Corner extraction...

Processing image 18...
Using (wintx,winty)=(5,5) - Window size = 11x11      (Note: To reset the window size, run script clearwin)
Click on the four extreme corners of the rectangular complete pattern (the first clicked corner is the origin)...
Size of each square along the X direction: dX=100mm
Size of each square along the Y direction: dY=100mm   (Note: To reset the size of the squares, clear the variables dX and dY)
If the guessed grid corners (red crosses on the image) are not close to the actual corners,
it is necessary to enter an initial guess for the radial distortion factor kc (useful for subpixel detection)
Need of an initial guess for distortion? ([]=no, other=yes) 
Corner extraction...

Processing image 19...
Using (wintx,winty)=(5,5) - Window size = 11x11      (Note: To reset the window size, run script clearwin)
Click on the four extreme corners of the rectangular complete pattern (the first clicked corner is the origin)...
Size of each square along the X direction: dX=100mm
Size of each square along the Y direction: dY=100mm   (Note: To reset the size of the squares, clear the variables dX and dY)
If the guessed grid corners (red crosses on the image) are not close to the actual corners,
it is necessary to enter an initial guess for the radial distortion factor kc (useful for subpixel detection)
Need of an initial guess for distortion? ([]=no, other=yes) 
Corner extraction...

Processing image 20...
Using (wintx,winty)=(5,5) - Window size = 11x11      (Note: To reset the window size, run script clearwin)
Click on the four extreme corners of the rectangular complete pattern (the first clicked corner is the origin)...
Size of each square along the X direction: dX=100mm
Size of each square along the Y direction: dY=100mm   (Note: To reset the size of the squares, clear the variables dX and dY)
If the guessed grid corners (red crosses on the image) are not close to the actual corners,
it is necessary to enter an initial guess for the radial distortion factor kc (useful for subpixel detection)
Need of an initial guess for distortion? ([]=no, other=yes) 
Corner extraction...
done

Aspect ratio optimized (est_aspect_ratio = 1) -> both components of fc are estimated (DEFAULT).
Principal point optimized (center_optim=1) - (DEFAULT). To reject principal point, set center_optim=0
Skew not optimized (est_alpha=0) - (DEFAULT)
Distortion not fully estimated (defined by the variable est_dist):
     Sixth order distortion not estimated (est_dist(5)=0) - (DEFAULT) .
Initialization of the principal point at the center of the image.
Initialization of the intrinsic parameters using the vanishing points of planar patterns.

Initialization of the intrinsic parameters - Number of images: 20


Calibration parameters after initialization:

Focal Length:          fc = [ 670.65464   670.65464 ]
Principal point:       cc = [ 319.50000   239.50000 ]
Skew:             alpha_c = [ 0.00000 ]   => angle of pixel = 90.00000 degrees
Distortion:            kc = [ 0.00000   0.00000   0.00000   0.00000   0.00000 ]

Main calibration optimization procedure - Number of images: 20
Gradient descent iterations: 1...2...3...4...5...6...7...8...9...10...11...12...13...14...15...16...17...18...19...20...21...22...23...24...done
Estimation of uncertainties...done


Calibration results after optimization (with uncertainties):

Focal Length:          fc = [ 662.49490   664.67695 ] +/- [ 1.43396   1.54256 ]
Principal point:       cc = [ 306.51230   241.75121 ] +/- [ 2.83475   2.60820 ]
Skew:             alpha_c = [ 0.00000 ] +/- [ 0.00000  ]   => angle of pixel axes = 90.00000 +/- 0.00000 degrees
Distortion:            kc = [ -0.27908   0.32025   0.00050   0.00028  0.00000 ] +/- [ 0.01144   0.04729   0.00064   0.00067  0.00000 ]
Pixel error:          err = [ 0.59061   0.42181 ]

Note: The numerical errors are approximately three times the standard deviations (for reference).


Number(s) of image(s) to show ([] = all images) = 
Pixel error:      err = [0.59061   0.42181] (all active images)


Re-extraction of the grid corners on the images (after first calibration)
Window size for corner finder (wintx and winty):
wintx ([] = 5) = 
winty ([] = 5) = 
Window size = 11x11
Number(s) of image(s) to process ([] = all images) = 
Use the projection of 3D grid or manual click ([]=auto, other=manual): 
Processing image 1...2...3...4...5...6...7...8...9...10...11...12...13...14...15...16...17...18...19...20...
done

Aspect ratio optimized (est_aspect_ratio = 1) -> both components of fc are estimated (DEFAULT).
Principal point optimized (center_optim=1) - (DEFAULT). To reject principal point, set center_optim=0
Skew not optimized (est_alpha=0) - (DEFAULT)
Distortion not fully estimated (defined by the variable est_dist):
     Sixth order distortion not estimated (est_dist(5)=0) - (DEFAULT) .

Main calibration optimization procedure - Number of images: 20
Gradient descent iterations: 1...2...3...4...5...6...7...8...9...10...11...12...13...14...15...16...17...18...done
Estimation of uncertainties...done


Calibration results after optimization (with uncertainties):

Focal Length:          fc = [ 657.64372   658.04110 ] +/- [ 0.40242   0.43055 ]
Principal point:       cc = [ 303.19237   242.55567 ] +/- [ 0.81858   0.74879 ]
Skew:             alpha_c = [ 0.00000 ] +/- [ 0.00000  ]   => angle of pixel axes = 90.00000 +/- 0.00000 degrees
Distortion:            kc = [ -0.25610   0.13089   -0.00019   0.00004  0.00000 ] +/- [ 0.00314   0.01251   0.00017   0.00017  0.00000 ]
Pixel error:          err = [ 0.15297   0.13965 ]

Note: The numerical errors are approximately three times the standard deviations (for reference).



Saving calibration results under Calib_Results.mat
Generating the matlab script file Calib_Results.m containing the intrinsic and extrinsic parameters...
done
Number(s) of image(s) to show ([] = all images) = 
Pixel error:      err = [0.15297   0.13965] (all active images)

Pixel error:          err = [ 0.15297   0.13965] (all active images)


Selected image: 14
Selected point index: 18
Pattern coordinates (in units of (dX,dY)): (X,Y)=(5,11)
Image coordinates (in pixel): (500.85,259.34)
Pixel error = (-0.24630,-0.04013)
Window size: (wintx,winty) = (5,5)
done
Pixel error:          err = [ 0.15297   0.13965] (all active images)


Selected image: 18
Selected point index: 85
Pattern coordinates (in units of (dX,dY)): (X,Y)=(0,5)
Image coordinates (in pixel): (215.72,78.79)
Pixel error = (4.64087,3.35887)
Window size: (wintx,winty) = (5,5)

Selected image: 18
Selected point index: 85
Pattern coordinates (in units of (dX,dY)): (X,Y)=(0,5)
Image coordinates (in pixel): (215.72,78.79)
Pixel error = (4.64087,3.35887)
Window size: (wintx,winty) = (5,5)

Selected image: 18
Selected point index: 85
Pattern coordinates (in units of (dX,dY)): (X,Y)=(0,5)
Image coordinates (in pixel): (215.72,78.79)
Pixel error = (4.64087,3.35887)
Window size: (wintx,winty) = (5,5)

Re-extraction of the grid corners on the images (after first calibration)
Window size for corner finder (wintx and winty):
wintx ([] = 5) = 
winty ([] = 5) = 
Window size = 11x11
Number(s) of image(s) to process ([] = all images) = 
Use the projection of 3D grid or manual click ([]=auto, other=manual): 
Processing image 1...2...3...4...5...6...7...8...9...10...11...12...13...14...15...16...17...18...19...20...
done

Re-extraction of the grid corners on the images (after first calibration)
Window size for corner finder (wintx and winty):
wintx ([] = 5) = 9
winty ([] = 5) = 9
Window size = 19x19
Number(s) of image(s) to process ([] = all images) = 1, 2, 3, 4, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17
Error using recomp_corner_calib (line 59)
Error: Invalid expression. Check for missing multiplication operator, missing
or unbalanced delimiters, or other syntax error. To construct matrices, use
brackets instead of parentheses.
 
Number(s) of image(s) to process ([] = all images) = 1:4 6 9:17
 1:4 6 9:17
     ↑
Error: Invalid expression. Check for missing multiplication operator, missing
or unbalanced delimiters, or other syntax error. To construct matrices, use
brackets instead of parentheses.
 
Number(s) of image(s) to process ([] = all images) = [1:4 6 9:17]
Use the projection of 3D grid or manual click ([]=auto, other=manual): 
Processing image 1...2...3...4...6...9...10...11...12...13...14...15...16...17...
done

Re-extraction of the grid corners on the images (after first calibration)
Window size for corner finder (wintx and winty):
wintx ([] = 5) = 8
winty ([] = 5) = 8
Window size = 17x17
Number(s) of image(s) to process ([] = all images) = 18
Use the projection of 3D grid or manual click ([]=auto, other=manual): 
Processing image 18...
done

Re-extraction of the grid corners on the images (after first calibration)
Window size for corner finder (wintx and winty):
wintx ([] = 5) = 7
winty ([] = 5) = 7
Window size = 15x15
Number(s) of image(s) to process ([] = all images) = [5 7 8 19]
Use the projection of 3D grid or manual click ([]=auto, other=manual): 
Processing image 5...7...8...19...
done

Aspect ratio optimized (est_aspect_ratio = 1) -> both components of fc are estimated (DEFAULT).
Principal point optimized (center_optim=1) - (DEFAULT). To reject principal point, set center_optim=0
Skew not optimized (est_alpha=0) - (DEFAULT)
Distortion not fully estimated (defined by the variable est_dist):
     Sixth order distortion not estimated (est_dist(5)=0) - (DEFAULT) .

Main calibration optimization procedure - Number of images: 20
Gradient descent iterations: 1...2...3...4...5...6...7...8...9...10...11...12...13...14...15...16...done
Estimation of uncertainties...done


Calibration results after optimization (with uncertainties):

Focal Length:          fc = [ 657.46241   657.94612 ] +/- [ 0.31817   0.34045 ]
Principal point:       cc = [ 303.13720   242.56996 ] +/- [ 0.64679   0.59215 ]
Skew:             alpha_c = [ 0.00000 ] +/- [ 0.00000  ]   => angle of pixel axes = 90.00000 +/- 0.00000 degrees
Distortion:            kc = [ -0.25403   0.12143   -0.00021   0.00002  0.00000 ] +/- [ 0.00248   0.00986   0.00013   0.00013  0.00000 ]
Pixel error:          err = [ 0.11688   0.11500 ]

Note: The numerical errors are approximately three times the standard deviations (for reference).


Pixel error:          err = [ 0.11688   0.11500] (all active images)

done
done
Number(s) of image(s) to show ([] = all images) = 18
Pixel error:      err = [0.11688   0.11500] (all active images)

WARNING: File Calib_Results.mat already exists
Copying the current Calib_Results.mat file to Calib_Results_old0.mat
Copying the current Calib_Results.m file to Calib_Results_old0.m

Saving calibration results under Calib_Results.mat
Generating the matlab script file Calib_Results.m containing the intrinsic and extrinsic parameters...
done
Loading image 1...2...3...4...5...6...7...8...9...10...11...12...13...14...15...16...17...18...19...20...21...22...23...24...25...
done
>> mosaic

Extraction of the grid corners on the images
Number(s) of image(s) to process ([] = all images) = 21:25
Window size for corner finder (wintx and winty):
wintx ([] = 5) = 
winty ([] = 5) = 
Window size = 11x11
Do you want to use the automatic square counting mechanism (0=[]=default)
  or do you always want to enter the number of squares manually (1,other)? 

Processing image 21...
Using (wintx,winty)=(5,5) - Window size = 11x11      (Note: To reset the window size, run script clearwin)
Click on the four extreme corners of the rectangular complete pattern (the first clicked corner is the origin)...
Size of each square along the X direction: dX=100mm
Size of each square along the Y direction: dY=100mm   (Note: To reset the size of the squares, clear the variables dX and dY)
If the guessed grid corners (red crosses on the image) are not close to the actual corners,
it is necessary to enter an initial guess for the radial distortion factor kc (useful for subpixel detection)
Need of an initial guess for distortion? ([]=no, other=yes) 
Corner extraction...

Processing image 22...
Using (wintx,winty)=(5,5) - Window size = 11x11      (Note: To reset the window size, run script clearwin)
Click on the four extreme corners of the rectangular complete pattern (the first clicked corner is the origin)...
Size of each square along the X direction: dX=100mm
Size of each square along the Y direction: dY=100mm   (Note: To reset the size of the squares, clear the variables dX and dY)
If the guessed grid corners (red crosses on the image) are not close to the actual corners,
it is necessary to enter an initial guess for the radial distortion factor kc (useful for subpixel detection)
Need of an initial guess for distortion? ([]=no, other=yes) 
Corner extraction...

Processing image 23...
Using (wintx,winty)=(5,5) - Window size = 11x11      (Note: To reset the window size, run script clearwin)
Click on the four extreme corners of the rectangular complete pattern (the first clicked corner is the origin)...
Size of each square along the X direction: dX=100mm
Size of each square along the Y direction: dY=100mm   (Note: To reset the size of the squares, clear the variables dX and dY)
If the guessed grid corners (red crosses on the image) are not close to the actual corners,
it is necessary to enter an initial guess for the radial distortion factor kc (useful for subpixel detection)
Need of an initial guess for distortion? ([]=no, other=yes) 
Corner extraction...

Processing image 24...
Using (wintx,winty)=(5,5) - Window size = 11x11      (Note: To reset the window size, run script clearwin)
Click on the four extreme corners of the rectangular complete pattern (the first clicked corner is the origin)...
Size of each square along the X direction: dX=100mm
Size of each square along the Y direction: dY=100mm   (Note: To reset the size of the squares, clear the variables dX and dY)
If the guessed grid corners (red crosses on the image) are not close to the actual corners,
it is necessary to enter an initial guess for the radial distortion factor kc (useful for subpixel detection)
Need of an initial guess for distortion? ([]=no, other=yes) 
Corner extraction...

Processing image 25...
Using (wintx,winty)=(5,5) - Window size = 11x11      (Note: To reset the window size, run script clearwin)
Click on the four extreme corners of the rectangular complete pattern (the first clicked corner is the origin)...
Size of each square along the X direction: dX=100mm
Size of each square along the Y direction: dY=100mm   (Note: To reset the size of the squares, clear the variables dX and dY)
If the guessed grid corners (red crosses on the image) are not close to the actual corners,
it is necessary to enter an initial guess for the radial distortion factor kc (useful for subpixel detection)
Need of an initial guess for distortion? ([]=no, other=yes) 
Corner extraction...
done
Need to calibrate once before before recomputing image corners. Maybe need to load Calib_Results.mat file.

Aspect ratio optimized (est_aspect_ratio = 1) -> both components of fc are estimated (DEFAULT).
Principal point optimized (center_optim=1) - (DEFAULT). To reject principal point, set center_optim=0
Skew not optimized (est_alpha=0) - (DEFAULT)
Distortion not fully estimated (defined by the variable est_dist):
     Sixth order distortion not estimated (est_dist(5)=0) - (DEFAULT) .

Main calibration optimization procedure - Number of images: 25
Gradient descent iterations: 1...2...3...4...5...6...7...8...9...10...11...12...13...14...15...16...done
Estimation of uncertainties...done


Calibration results after optimization (with uncertainties):

Focal Length:          fc = [ 657.28264   657.72283 ] +/- [ 0.28534   0.28989 ]
Principal point:       cc = [ 303.05896   242.52895 ] +/- [ 0.57973   0.55429 ]
Skew:             alpha_c = [ 0.00000 ] +/- [ 0.00000  ]   => angle of pixel axes = 90.00000 +/- 0.00000 degrees
Distortion:            kc = [ -0.25364   0.12064   -0.00027   0.00002  0.00000 ] +/- [ 0.00231   0.00943   0.00012   0.00012  0.00000 ]
Pixel error:          err = [ 0.11846   0.11525 ]

Note: The numerical errors are approximately three times the standard deviations (for reference).



Re-extraction of the grid corners on the images (after first calibration)
Window size for corner finder (wintx and winty):
wintx ([] = 5) = 9
winty ([] = 5) = 9
Window size = 19x19
Number(s) of image(s) to process ([] = all images) = 22 24
 22 24
    ↑
Error: Invalid expression. Check for missing multiplication operator, missing
or unbalanced delimiters, or other syntax error. To construct matrices, use
brackets instead of parentheses.
 
Number(s) of image(s) to process ([] = all images) = [22 24]
Use the projection of 3D grid or manual click ([]=auto, other=manual): 
Processing image 22...24...
done

Re-extraction of the grid corners on the images (after first calibration)
Window size for corner finder (wintx and winty):
wintx ([] = 5) = 8
winty ([] = 5) = 8
Window size = 17x17
Number(s) of image(s) to process ([] = all images) = 23
Use the projection of 3D grid or manual click ([]=auto, other=manual): 
Processing image 23...
done

Re-extraction of the grid corners on the images (after first calibration)
Window size for corner finder (wintx and winty):
wintx ([] = 5) = 6
winty ([] = 5) = 6
Window size = 13x13
Number(s) of image(s) to process ([] = all images) = 25
Use the projection of 3D grid or manual click ([]=auto, other=manual): 
Processing image 25...
done

Aspect ratio optimized (est_aspect_ratio = 1) -> both components of fc are estimated (DEFAULT).
Principal point optimized (center_optim=1) - (DEFAULT). To reject principal point, set center_optim=0
Skew not optimized (est_alpha=0) - (DEFAULT)
Distortion not fully estimated (defined by the variable est_dist):
     Sixth order distortion not estimated (est_dist(5)=0) - (DEFAULT) .

Main calibration optimization procedure - Number of images: 25
Gradient descent iterations: 1...2...3...4...5...6...7...8...9...10...11...12...13...14...15...16...done
Estimation of uncertainties...done


Calibration results after optimization (with uncertainties):

Focal Length:          fc = [ 657.32498   657.78757 ] +/- [ 0.28322   0.28773 ]
Principal point:       cc = [ 303.06310   242.50644 ] +/- [ 0.57539   0.55023 ]
Skew:             alpha_c = [ 0.00000 ] +/- [ 0.00000  ]   => angle of pixel axes = 90.00000 +/- 0.00000 degrees
Distortion:            kc = [ -0.25342   0.11973   -0.00028   0.00001  0.00000 ] +/- [ 0.00230   0.00936   0.00012   0.00012  0.00000 ]
Pixel error:          err = [ 0.11734   0.11465 ]

Note: The numerical errors are approximately three times the standard deviations (for reference).


WARNING: File Calib_Results.mat already exists
Copying the current Calib_Results.mat file to Calib_Results_old1.mat
Copying the current Calib_Results.m file to Calib_Results_old1.m

Saving calibration results under Calib_Results.mat
Generating the matlab script file Calib_Results.m containing the intrinsic and extrinsic parameters...
done
Bye. To run again, type calib_gui.
>> 